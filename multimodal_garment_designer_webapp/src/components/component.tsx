/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/XBjPzQr5VoX
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'
import { Rubik } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

rubik({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/

/** Add border radius CSS variable to your global CSS:

:root {
  --radius: 0.5rem;
}
**/

"use client";
import { useState } from 'react';
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"

export function Component() {

  // Initialize state with an empty array of textual inputs
  const [textualInputs, setTextualInput] = useState<string[]>([]);
  // addedInput is the value of the textarea. The function setAddedInput is used to update the value of the textarea.
  const [addedInput, setAddedInput] = useState<string>("");

  // State to manage the current image
  const [currentImage, setCurrentImage] = useState<string>("/assets/model1.jpg");

  // Event handler to add a new textual input
  const handleAddTextualInputClick = () => {
    // Ensure the text is not empty
    if (addedInput.trim()) { 
      setTextualInput([...textualInputs, addedInput]);
      // Clear the textarea after adding
      setAddedInput(""); 
    }
  };

  // Event handler to change the current image
  const handleImageChange = (newImage: string) => {
    setCurrentImage(newImage);
  };

  // Event handler to remove a textual input
  const handleRemoveTextualInput = (index: number) => {
    setTextualInput(textualInputs.filter((_, i) => i !== index));
  };
    

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-950 p-4 md:p-8">
      <div className="max-w-4xl w-full bg-white dark:bg-gray-900 rounded-2xl shadow-lg overflow-hidden">
        <div className="grid md:grid-cols-2">
        <div className="relative flex items-center justify-center bg-gray-100 dark:bg-gray-800 p-8">
            <img
              alt="Model"
              className="max-w-full h-auto rounded-lg"
              height={1024}
              src={currentImage}
              width={768}
            />
            <div /*className="absolute inset-0 bg-black/50 flex items-center justify-center"*/ />
              <div className="absolute bottom-4 right-4 flex items-center gap-2">
                <Button size="icon" variant="outline" onClick={() => handleImageChange("/assets/model1.jpg")}>
                  <img
                    alt="Model 1"
                    className="rounded-md"
                    height={50}
                    src="/assets/model1.jpg"
                    style={{
                      aspectRatio: "40/50",
                      objectFit: "cover",
                    }}
                    width={40}
                  />
                </Button>
                <Button size="icon" variant="outline" onClick={() => handleImageChange("/assets/model2.jpg")}>
                  <img
                    alt="Model 2"
                    className="rounded-md"
                    height={50}
                    src="/assets/model2.jpg"
                    style={{
                      aspectRatio: "40/50",
                      objectFit: "cover",
                    }}
                    width={40}
                  />
                </Button>
                <Button size="icon" variant="outline" onClick={() => handleImageChange("/assets/model3.jpg")}>
                  <img
                    alt="Model 3"
                    className="rounded-md"
                    height={50}
                    src="/assets/model3.jpg"
                    style={{
                      aspectRatio: "40/50",
                      objectFit: "cover",
                    }}
                    width={40}
                  />
                </Button>
                <Button size="icon" variant="outline" onClick={() => handleImageChange("/assets/model4.jpg")}>
                  <img
                    alt="Model 4"
                    className="rounded-md"
                    height={50}
                    src="/assets/model4.jpg"
                    style={{
                      aspectRatio: "40/50",
                      objectFit: "cover",
                    }}
                    width={40}
                  />
                </Button>
                <Button size="icon" variant="outline" onClick={() => handleImageChange("/assets/model5.jpg")}>
                  <img
                    alt="Model 5"
                    className="rounded-md"
                    height={50}
                    src="/assets/model5.jpg"
                    style={{
                      aspectRatio: "40/50",
                      objectFit: "cover",
                    }}
                    width={40}
                  />
                </Button>
              </div>
            </div>
          <div className="p-8 space-y-6">
            <h1 className="text-3xl font-bold">Design Your Shirt</h1>
            <div className="space-y-4">
              <div>
                <Label htmlFor="text">Add Textual Input</Label>
                <div className="relative">
                  <Textarea className="w-full pr-12" id="text" value={addedInput} onChange={(e) => setAddedInput(e.target.value)} placeholder="Enter your text here..." rows={3} />
                  <Button className="absolute top-1/2 -translate-y-1/2 right-3" size="icon" variant="outline" onClick={handleAddTextualInputClick}>
                    <PlusIcon className="w-5 h-5" />
                  </Button>
                </div>
              </div>
              <div className="balloon-container space-y-2">
                {textualInputs.map((text, index) => (
                  <div key={index} className="bg-gray-100 dark:bg-gray-800 rounded-lg p-3 flex items-center justify-between mb-2 balloon">
                    <span>{text}</span>
                    <Button
                      className="text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                      size="icon"
                      variant="outline"
                      onClick={() => handleRemoveTextualInput(index)}
                    >
                      <XIcon className="w-4 h-4" />
                    </Button>
                 </div>
              ))}
                {/*<div className="bg-gray-100 dark:bg-gray-800 rounded-lg p-3 flex items-center justify-between mb-2 balloon">
                  <span>Hello World</span>
                  <Button
                    className="text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                    size="icon"
                    variant="outline"
                  >
                    <XIcon className="w-4 h-4" />
                  </Button>
                </div>
                <div className="bg-gray-100 dark:bg-gray-800 rounded-lg p-3 flex items-center justify-between mb-2 balloon">
                  <span>Goodbye World</span>
                  <Button
                    className="text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                    size="icon"
                    variant="outline"
                  >
                    <XIcon className="w-4 h-4" />
                  </Button>
                </div>
                <div className="bg-gray-100 dark:bg-gray-800 rounded-lg p-3 flex items-center justify-between mb-2 balloon">
                  <span>Shirt Design</span>
                  <Button
                    className="text-gray-500 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-50"
                    size="icon"
                    variant="outline"
                  >
                    <XIcon className="w-4 h-4" />
                  </Button>
                </div>*/}
              </div>
              <div>
                <Label>Draw on the Shirt</Label>
                <div className="flex items-center justify-center">
                  <Button className="mr-2" size="icon" variant="outline">
                    <PencilIcon className="w-5 h-5" />
                  </Button>
                  <Button size="icon" variant="outline">
                    <TrashIcon className="w-5 h-5" />
                  </Button>
                </div>
              </div>
            </div>
            <div className="balloon-container space-y-2" />
            <Button className="w-full">Generate Shirt Design</Button>
            <div className="flex items-center justify-center">
              <img
                alt="Latest Generated Design"
                className="rounded-lg"
                height={375}
                src="/placeholder.svg"
                style={{
                  aspectRatio: "300/375",
                  objectFit: "cover",
                }}
                width={300}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

function PencilIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z" />
      <path d="m15 5 4 4" />
    </svg>
  )
}


function PlusIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  )
}


function TrashIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>
  )
}


function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
